create or replace function persentase(n1 numeric, n2 numeric)
  returns numeric as
$body$
declare 

vartemp numeric;
varreturn numeric;

begin
	case when coalesce(n2,0) > 0 
	then 
	vartemp:= round(coalesce(n1,0) * (coalesce(n2,0) / 100),2);
	--vartemp:= round(coalesce(n1,0) / coalesce(n2,0) * 100,2);
	else
	vartemp:= 0;
	end case;

	case when vartemp - floor(vartemp) > .00 
	then varreturn:= vartemp;
	else 
	varreturn:= cast(vartemp as integer);
	end case;
	
	return varreturn; 
end;
$body$
language plpgsql volatile cost 100;
alter function persentase(numeric, numeric) owner to postgres;

DROP type if exists p_rumpunskor_type;
create type p_rumpunskor_type as (
pegawai_id numeric, rumpun_id integer, total numeric, nilai numeric
);

DROP FUNCTION if exists talent.p_rumpun_rekamjejak(integer);
CREATE or replace FUNCTION talent.p_rumpun_rekamjejak(rumpunid integer) RETURNS SETOF p_rumpunskor_type AS $$
DECLARE
  cur refcursor;
  QUERY TEXT;
  rec p_rumpunskor_type%ROWTYPE;
BEGIN

  QUERY := '
  	SELECT A.PEGAWAI_ID, A.RUMPUN_ID, A.NILAI_REKAM_JEJAK_HITUNG TOTAL, persentase(A.NILAI_REKAM_JEJAK_HITUNG, RN.NILAI) PERSENTASE
	FROM
	(
		SELECT
		    A.PEGAWAI_ID, A.RUMPUN_ID
		    ,
		    SUM
		    (
			CASE WHEN LAMA_JABATAN_HITUNG >= 5 THEN 100
			WHEN LAMA_JABATAN_HITUNG >= 4 THEN 80
			WHEN LAMA_JABATAN_HITUNG >= 3 THEN 60
			WHEN LAMA_JABATAN_HITUNG >= 2 THEN 40
			WHEN LAMA_JABATAN_HITUNG >= 1 THEN 20
			ELSE 0 END
		    ) NILAI_REKAM_JEJAK_HITUNG
		FROM
		(
		    SELECT A.*
		    , CASE WHEN A.TMT_SELESAI_JABATAN IS NULL THEN
			CASE WHEN
			(datediff(''month'', TO_DATE(TO_CHAR(A.TMT_JABATAN, ''YYYY-MM-DD''), ''YYYY-MM-DD''), TO_DATE(TO_CHAR(NOW(), ''YYYY-MM-DD''), ''YYYY-MM-DD'')) / 12) > 2
			THEN 1 ELSE 0
			END
			+
			datediff(''year'', TO_DATE(TO_CHAR(A.TMT_JABATAN, ''YYYY-MM-DD''), ''YYYY-MM-DD''), TO_DATE(TO_CHAR(NOW(), ''YYYY-MM-DD''), ''YYYY-MM-DD''))
		    ELSE A.LAMA_JABATAN
		    END LAMA_JABATAN_HITUNG
		    FROM jabatan_riwayat A
		) A
		WHERE 1=1
		AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
		AND A.RUMPUN_ID IS NOT NULL
		GROUP BY A.PEGAWAI_ID, A.RUMPUN_ID
	) A
	, 
	(
	SELECT NILAI FROM talent.rumpun_nilai WHERE INFOMODE = ''perumpunan'' AND INFOID = 1
	) RN
	WHERE 1=1
	';
	
	if rumpunid > 0 then
	QUERY := QUERY || '
	AND A.RUMPUN_ID = '|| rumpunid ||'
	--AND A.PEGAWAI_ID = 8887
	';
	end if;
	--raise notice 'sql %', QUERY;
	--select * from talent.p_rumpun_rekamjejak(3);
	--select * from talent.p_rumpun_rekamjejak(0);
	
  OPEN cur FOR EXECUTE QUERY;
  
  FETCH cur INTO rec;
  WHILE FOUND LOOP
    RETURN NEXT rec;
    FETCH cur INTO rec;
  END LOOP;
  CLOSE cur;
END;
$$ LANGUAGE plpgsql STRICT;

DROP FUNCTION if exists talent.p_rumpun_kualifikasi(integer);
CREATE or replace FUNCTION talent.p_rumpun_kualifikasi(rumpunid integer) RETURNS SETOF p_rumpunskor_type AS $$
DECLARE
  cur refcursor;
  QUERY TEXT;
  rec p_rumpunskor_type%ROWTYPE;
BEGIN
  QUERY := '
	SELECT A.PEGAWAI_ID, A.RUMPUN_ID, A.NILAI_REKAM_JEJAK TOTAL, persentase(A.NILAI_REKAM_JEJAK, RN.NILAI) PERSENTASE
	FROM
	(
		SELECT
		A.PEGAWAI_ID, A.RUMPUN_ID
		, SUM(A.NILAI_REKAM_JEJAK) NILAI_REKAM_JEJAK
		FROM
		(
		    SELECT
			A.PEGAWAI_ID
			, UNNEST(STRING_TO_ARRAY(A.RUMPUN_ID, '',''))::numeric RUMPUN_ID
			, A.NILAI_REKAM_JEJAK
		    FROM pendidikan_riwayat A
		    WHERE 1=1
		    AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
		    AND A.STATUS_PENDIDIKAN IN (''1'', ''2'')
		    AND A.PENDIDIKAN_ID > 8
		    AND A.RUMPUN_ID IS NOT NULL
		) A
		WHERE A.RUMPUN_ID IS NOT NULL
		GROUP BY A.PEGAWAI_ID, A.RUMPUN_ID
	) A
	, 
	(
	SELECT NILAI FROM talent.rumpun_nilai WHERE INFOMODE = ''perumpunan'' AND INFOID = 2
	) RN
	WHERE 1=1
	';
	
	if rumpunid > 0 then
	QUERY := QUERY || '
	AND A.RUMPUN_ID = '|| rumpunid ||'
	--AND A.PEGAWAI_ID = 8887
	--ORDER BY NILAI_REKAM_JEJAK DESC
	';
	end if;
	--raise notice 'sql %', QUERY;
	--select * from talent.p_rumpun_kualifikasi(3);
	--select * from talent.p_rumpun_kualifikasi(0);
	
  OPEN cur FOR EXECUTE QUERY;
  
  FETCH cur INTO rec;
  WHILE FOUND LOOP
    RETURN NEXT rec;
    FETCH cur INTO rec;
  END LOOP;
  CLOSE cur;
END;
$$ LANGUAGE plpgsql STRICT;

DROP FUNCTION if exists talent.p_rumpun_kompetensi(integer);
CREATE or replace FUNCTION talent.p_rumpun_kompetensi(rumpunid integer) RETURNS SETOF p_rumpunskor_type AS $$
DECLARE
  cur refcursor;
  QUERY TEXT;
  rec p_rumpunskor_type%ROWTYPE;
BEGIN
  QUERY := '
	SELECT A.PEGAWAI_ID, A.RUMPUN_ID, A.NILAI_REKAM_JEJAK TOTAL, persentase(A.NILAI_REKAM_JEJAK, RN.NILAI) PERSENTASE
	FROM
	(
		SELECT
		    A.PEGAWAI_ID, A.RUMPUN_ID
		    , SUM(A.NILAI_REKAM_JEJAK) NILAI_REKAM_JEJAK
		FROM
		(
		    SELECT
		    A.PEGAWAI_ID, 1 INFO_URUT, B.NAMA DIKLAT_NAMA, A.RUMPUN_ID, A.TANGGAL_MULAI, A.NILAI_REKAM_JEJAK
		    FROM diklat_struktural A
		    INNER JOIN diklat B ON A.DIKLAT_ID = B.DIKLAT_ID
		    WHERE 1=1
		    AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
		    UNION ALL
		    SELECT
		    A.PEGAWAI_ID, 2 INFO_URUT, A.NAMA DIKLAT_NAMA, A.RUMPUN_ID, A.TANGGAL_MULAI, A.NILAI_REKAM_JEJAK
		    FROM diklat_kursus A
		    WHERE 1=1
		    AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
		) A
		WHERE A.RUMPUN_ID IS NOT NULL
		GROUP BY A.PEGAWAI_ID, A.RUMPUN_ID
	) A
	, 
	(
	SELECT NILAI FROM talent.rumpun_nilai WHERE INFOMODE = ''perumpunan'' AND INFOID = 3
	) RN
	WHERE 1=1
	';
	
	if rumpunid > 0 then
	QUERY := QUERY || '
	AND A.RUMPUN_ID = '|| rumpunid ||'
	--AND A.PEGAWAI_ID = 8887
	--ORDER BY NILAI_REKAM_JEJAK DESC
	';
	end if;
	--raise notice 'sql %', QUERY;
	--select * from talent.p_rumpun_kompetensi(3);
	--select * from talent.p_rumpun_kompetensi(0);
	
  OPEN cur FOR EXECUTE QUERY;
  
  FETCH cur INTO rec;
  WHILE FOUND LOOP
    RETURN NEXT rec;
    FETCH cur INTO rec;
  END LOOP;
  CLOSE cur;
END;
$$ LANGUAGE plpgsql STRICT;

DROP FUNCTION if exists talent.p_rumpun_indispliner(integer);
CREATE or replace FUNCTION talent.p_rumpun_indispliner(rumpunid integer) RETURNS SETOF p_rumpunskor_type AS $$
DECLARE
  cur refcursor;
  QUERY TEXT;
  rec p_rumpunskor_type%ROWTYPE;
BEGIN

  QUERY := '
  	SELECT A.PEGAWAI_ID, A.RUMPUN_ID, A.NILAI TOTAL, 0::numeric PERSENTASE
	FROM
	(
		SELECT
		P.PEGAWAI_ID, NULL::integer RUMPUN_ID
		, CASE WHEN COALESCE(HK.JUMLAH_HK_BERAT,0) > 0 THEN 25 WHEN COALESCE(HK.JUMLAH_HK_SEDANG,0) > 0 THEN 50 WHEN COALESCE(HK.JUMLAH_HK_RINGAN,0) > 0 THEN 75 ELSE 100 END NILAI
		FROM pegawai P
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID
			, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 3 THEN 1 ELSE 0 END) JUMLAH_HK_BERAT
			, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 2 THEN 1 ELSE 0 END) JUMLAH_HK_SEDANG
			, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 1 THEN 1 ELSE 0 END) JUMLAH_HK_RINGAN
			FROM hukuman A
			WHERE 1=1
			AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
			GROUP BY A.PEGAWAI_ID
		) HK ON HK.PEGAWAI_ID = P.PEGAWAI_ID
		WHERE 1=1
	) A
	WHERE 1=1
	';
	--raise notice 'sql %', QUERY;
	--select * from talent.p_rumpun_indispliner(0);
	
  OPEN cur FOR EXECUTE QUERY;
  
  FETCH cur INTO rec;
  WHILE FOUND LOOP
    RETURN NEXT rec;
    FETCH cur INTO rec;
  END LOOP;
  CLOSE cur;
END;
$$ LANGUAGE plpgsql STRICT;

DROP FUNCTION if exists talent.p_rumpun_pbj(integer);
CREATE or replace FUNCTION talent.p_rumpun_pbj(rumpunid integer) RETURNS SETOF p_rumpunskor_type AS $$
DECLARE
  cur refcursor;
  QUERY TEXT;
  rec p_rumpunskor_type%ROWTYPE;
BEGIN

  QUERY := '
  	SELECT A.PEGAWAI_ID, A.RUMPUN_ID, A.NILAI TOTAL, 0::numeric PERSENTASE
	FROM
	(
		SELECT
		P.PEGAWAI_ID, NULL::integer RUMPUN_ID
		, CASE WHEN COALESCE(DK.NILAI,0) > 0 THEN 100 ELSE 0 END NILAI
		FROM pegawai P
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID, COUNT(1) NILAI
			FROM diklat_kursus A
			WHERE 1=1 AND A.STATUS_LULUS = ''1''
			AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
			AND A.TIPE_KURSUS_ID IN (1,2)
			AND A.REF_JENIS_KURSUS_ID IN (162, 274)
			GROUP BY A.PEGAWAI_ID
		) DK ON DK.PEGAWAI_ID = P.PEGAWAI_ID
		WHERE 1=1
	) A
	WHERE 1=1
	';
	--raise notice 'sql %', QUERY;
	--select * from talent.p_rumpun_pbj(0);
	
  OPEN cur FOR EXECUTE QUERY;
  
  FETCH cur INTO rec;
  WHILE FOUND LOOP
    RETURN NEXT rec;
    FETCH cur INTO rec;
  END LOOP;
  CLOSE cur;
END;
$$ LANGUAGE plpgsql STRICT;

DROP FUNCTION if exists talent.p_rumpun_prestasi(integer);
CREATE or replace FUNCTION talent.p_rumpun_prestasi(rumpunid integer) RETURNS SETOF p_rumpunskor_type AS $$
DECLARE
  cur refcursor;
  QUERY TEXT;
  rec p_rumpunskor_type%ROWTYPE;
BEGIN

  QUERY := '
  	SELECT A.PEGAWAI_ID, A.RUMPUN_ID, A.NILAI TOTAL, 0::numeric PERSENTASE
	FROM
	(
		SELECT
		P.PEGAWAI_ID, NULL::integer RUMPUN_ID
		, CASE WHEN COALESCE(PH.NILAI,0) > 0 THEN 100 ELSE 0 END NILAI
		FROM pegawai P
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID, COUNT(1) NILAI
			FROM penghargaan A
			WHERE REF_PENGHARGAAN_ID IN
			(
				SELECT 
				REF_PENGHARGAAN_ID
				FROM sapk.ref_penghargaan A
				WHERE 1 = 1
				AND A.INFO_DETIL = ''1''
			)
			AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
			GROUP BY A.PEGAWAI_ID
		) PH ON PH.PEGAWAI_ID = P.PEGAWAI_ID
		WHERE 1=1
	) A
	WHERE 1=1
	';
	--raise notice 'sql %', QUERY;
	--select * from talent.p_rumpun_prestasi(0);
	
  OPEN cur FOR EXECUTE QUERY;
  
  FETCH cur INTO rec;
  WHILE FOUND LOOP
    RETURN NEXT rec;
    FETCH cur INTO rec;
  END LOOP;
  CLOSE cur;
END;
$$ LANGUAGE plpgsql STRICT;

DROP FUNCTION if exists talent.p_rumpun_nilai_akhir(integer, numeric);
CREATE or replace FUNCTION talent.p_rumpun_nilai_akhir(rumpunid integer, pegawaiid numeric) RETURNS SETOF p_rumpunskor_type AS $$
DECLARE
  cur refcursor;
  QUERY TEXT;
  rec p_rumpunskor_type%ROWTYPE;
BEGIN

  QUERY := '
  	SELECT A.PEGAWAI_ID, A.RUMPUN_ID, 0::numeric TOTAL
  	, PERSENTASE_KOMPETENSI + PERSENTASE_KINERJA + PERSENTASE_NILAI_RUMPUN + PERSENTASE_NILAI_FAKTOR_KOREKSI PERSENTASE
	FROM
	(
		SELECT
		A.PEGAWAI_ID, NULL::integer RUMPUN_ID
		, persentase(A.NILAI_KOMPETENSI, RN1.NILAI) PERSENTASE_KOMPETENSI
		, persentase(A.NILAI_KINERJA, RN2.NILAI) PERSENTASE_KINERJA
		, persentase(A.NILAI_RUMPUN, RN3.NILAI) PERSENTASE_NILAI_RUMPUN
		, persentase(A.NILAI_FAKTOR_KOREKSI, RN4.NILAI) PERSENTASE_NILAI_FAKTOR_KOREKSI
		FROM
		(
			SELECT A.PEGAWAI_ID, A.NILAI_KOMPETENSI, A.NILAI_KINERJA, A.NILAI_RUMPUN
			, COALESCE(A.NILAI_INDISIPLINER,0) + COALESCE(A.NILAI_PBJ,0) + COALESCE(A.NILAI_PRESTASI,0) NILAI_FAKTOR_KOREKSI
			FROM
			(
				SELECT
				P.PEGAWAI_ID, NULL::integer RUMPUN_ID
				, (COALESCE(R1.NILAI,0) + COALESCE(R2.NILAI,0) + COALESCE(R3.NILAI,0)) NILAI_RUMPUN
				, CASE WHEN COALESCE(HK.JUMLAH_HK_BERAT,0) > 0 THEN 25 WHEN COALESCE(HK.JUMLAH_HK_SEDANG,0) > 0 THEN 50 WHEN COALESCE(HK.JUMLAH_HK_RINGAN,0) > 0 THEN 75 ELSE 100 END NILAI_INDISIPLINER
				, CASE WHEN COALESCE(DK.NILAI,0) > 0 THEN 100 ELSE 0 END NILAI_PBJ
				, CASE WHEN COALESCE(PH.NILAI,0) > 0 THEN 100 ELSE 0 END NILAI_PRESTASI
				, COALESCE(K1.NILAI,0) NILAI_KOMPETENSI
				, COALESCE(K2.NILAI,0) NILAI_KINERJA
				FROM pegawai P
				LEFT JOIN
				(
					SELECT A.PEGAWAI_ID
					, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 3 THEN 1 ELSE 0 END) JUMLAH_HK_BERAT
					, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 2 THEN 1 ELSE 0 END) JUMLAH_HK_SEDANG
					, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 1 THEN 1 ELSE 0 END) JUMLAH_HK_RINGAN
					FROM hukuman A
					WHERE 1=1';
					if pegawaiid > 0 then
					QUERY := QUERY || ' AND A.PEGAWAI_ID = ' || pegawaiid;
					end if;
					QUERY := QUERY || '
					AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
					GROUP BY A.PEGAWAI_ID
				) HK ON HK.PEGAWAI_ID = P.PEGAWAI_ID
				LEFT JOIN
				(
					SELECT A.PEGAWAI_ID, COUNT(1) NILAI
					FROM diklat_kursus A
					WHERE 1=1 AND A.STATUS_LULUS = ''1''
					AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
					AND A.TIPE_KURSUS_ID IN (1,2)
					AND A.REF_JENIS_KURSUS_ID IN (162, 274)
					';
					if pegawaiid > 0 then
					QUERY := QUERY || ' AND A.PEGAWAI_ID = ' || pegawaiid;
					end if;
					QUERY := QUERY || '
					GROUP BY A.PEGAWAI_ID
				) DK ON DK.PEGAWAI_ID = P.PEGAWAI_ID
				LEFT JOIN
				(
					SELECT A.PEGAWAI_ID, COUNT(1) NILAI
					FROM penghargaan A
					WHERE REF_PENGHARGAAN_ID IN
					(
						SELECT 
						REF_PENGHARGAAN_ID
						FROM sapk.ref_penghargaan A
						WHERE 1 = 1
						AND A.INFO_DETIL = ''1''
					)
					AND (COALESCE(NULLIF(A.STATUS, ''''), NULL) IS NULL OR A.STATUS = ''2'')
					';
					if pegawaiid > 0 then
					QUERY := QUERY || ' AND A.PEGAWAI_ID = ' || pegawaiid;
					end if;
					QUERY := QUERY || '
					GROUP BY A.PEGAWAI_ID
				) PH ON PH.PEGAWAI_ID = P.PEGAWAI_ID
				LEFT JOIN
				(
					SELECT A.PEGAWAI_ID, MAX(SKOR_KOMPETENSI) NILAI
					FROM penilaian_kompetensi A
					INNER JOIN
					(
						SELECT PEGAWAI_ID, MAX(TANGGAL_KOMPETENSI) TANGGAL_KOMPETENSI
						FROM penilaian_kompetensi
						WHERE 1=1
						';
						if pegawaiid > 0 then
						QUERY := QUERY || ' AND PEGAWAI_ID = ' || pegawaiid;
						end if;
						QUERY := QUERY || '
						GROUP BY PEGAWAI_ID
					) B ON A.PEGAWAI_ID = B.PEGAWAI_ID AND A.TANGGAL_KOMPETENSI = B.TANGGAL_KOMPETENSI
					WHERE 1=1
					';
					if pegawaiid > 0 then
					QUERY := QUERY || ' AND A.PEGAWAI_ID = ' || pegawaiid;
					end if;
					QUERY := QUERY || '
					GROUP BY A.PEGAWAI_ID
				) K1 ON K1.PEGAWAI_ID = P.PEGAWAI_ID
				LEFT JOIN
				(
					SELECT A.PEGAWAI_ID, MAX(PRESTASI_HASIL) NILAI
					FROM penilaian_skp A
					INNER JOIN
					(
						SELECT PEGAWAI_ID, MAX(TAHUN) TAHUN
						FROM penilaian_skp
						WHERE 1=1
						';
						if pegawaiid > 0 then
						QUERY := QUERY || ' AND PEGAWAI_ID = ' || pegawaiid;
						end if;
						QUERY := QUERY || '
						GROUP BY PEGAWAI_ID
					) B ON A.PEGAWAI_ID = B.PEGAWAI_ID AND A.TAHUN = B.TAHUN
					WHERE 1=1
					';
					if pegawaiid > 0 then
					QUERY := QUERY || ' AND A.PEGAWAI_ID = ' || pegawaiid;
					end if;
					QUERY := QUERY || '
					GROUP BY A.PEGAWAI_ID
				) K2 ON K2.PEGAWAI_ID = P.PEGAWAI_ID
				LEFT JOIN (SELECT PEGAWAI_ID, NILAI FROM talent.p_rumpun_rekamjejak('|| rumpunid ||')) R1 ON R1.PEGAWAI_ID = P.PEGAWAI_ID
				LEFT JOIN (SELECT PEGAWAI_ID, NILAI FROM talent.p_rumpun_kualifikasi('|| rumpunid ||')) R2 ON R2.PEGAWAI_ID = P.PEGAWAI_ID
				LEFT JOIN (SELECT PEGAWAI_ID, NILAI FROM talent.p_rumpun_kompetensi('|| rumpunid ||')) R3 ON R3.PEGAWAI_ID = P.PEGAWAI_ID
				WHERE 1=1
				';
				if pegawaiid > 0 then
				QUERY := QUERY || ' AND P.PEGAWAI_ID = ' || pegawaiid;
				end if;
				QUERY := QUERY || '
			) A
		) A
		, 
		(
			SELECT NILAI FROM talent.rumpun_nilai WHERE INFOMODE = ''nilai_akhir'' AND INFOID = 1
		) RN1
		, 
		(
			SELECT NILAI FROM talent.rumpun_nilai WHERE INFOMODE = ''nilai_akhir'' AND INFOID = 2
		) RN2
		, 
		(
			SELECT NILAI FROM talent.rumpun_nilai WHERE INFOMODE = ''nilai_akhir'' AND INFOID = 3
		) RN3
		, 
		(
			SELECT NILAI FROM talent.rumpun_nilai WHERE INFOMODE = ''nilai_akhir'' AND INFOID = 4
		) RN4
		WHERE 1=1
		--AND A.PEGAWAI_ID IN (8887, 8300)
	) A
	WHERE 1=1
	';
	--raise notice 'sql %', QUERY;
	--select * from talent.p_rumpun_nilai_akhir(1, 0);
	--select * from talent.p_rumpun_nilai_akhir(1, 8300);
	
  OPEN cur FOR EXECUTE QUERY;
  
  FETCH cur INTO rec;
  WHILE FOUND LOOP
    RETURN NEXT rec;
    FETCH cur INTO rec;
  END LOOP;
  CLOSE cur;
END;
$$ LANGUAGE plpgsql STRICT;

drop table if exists talent.peta_pegawai;
create table talent.peta_pegawai
(
  pegawai_id numeric not null,
  rumpun_id numeric not null,
  status_pegawai_id numeric,
  nilai_indisipliner numeric,
  nilai_pbj numeric,
  nilai_prestasi numeric,
  nilai_kompetensi numeric,
  nilai_kinerja numeric,
  nilai_rumpun numeric,
  nilai_faktor_koreksi numeric,
  constraint pk_peta_pegawai primary key (pegawai_id, rumpun_id)
)
with (oids=false);
alter table talent.peta_pegawai owner to postgres;

create or replace function talent.ppetapegawai()
  returns void as
$body$
declare
    sqlquery text;
begin
	--execute sqlquery;
	DELETE FROM talent.peta_pegawai;
	
	INSERT INTO talent.peta_pegawai
	(
		PEGAWAI_ID, RUMPUN_ID, STATUS_PEGAWAI_ID
		, NILAI_INDISIPLINER, NILAI_PBJ, NILAI_PRESTASI, NILAI_KOMPETENSI, NILAI_KINERJA
	)
	SELECT
	P.PEGAWAI_ID, -1::numeric RUMPUN_ID, P.STATUS_PEGAWAI_ID
	, P.NILAI_INDISIPLINER, P.NILAI_PBJ, P.NILAI_PRESTASI, P.NILAI_KOMPETENSI, P.NILAI_KINERJA
	FROM
	(
		SELECT
		P.PEGAWAI_ID, P.STATUS_PEGAWAI_ID
		, CASE WHEN COALESCE(HK.JUMLAH_HK_BERAT,0) > 0 THEN 25 WHEN COALESCE(HK.JUMLAH_HK_SEDANG,0) > 0 THEN 50 WHEN COALESCE(HK.JUMLAH_HK_RINGAN,0) > 0 THEN 75 ELSE 100 END NILAI_INDISIPLINER
		, CASE WHEN COALESCE(DK.NILAI,0) > 0 THEN 100 ELSE 0 END NILAI_PBJ
		, CASE WHEN COALESCE(PH.NILAI,0) > 0 THEN 100 ELSE 0 END NILAI_PRESTASI
		, COALESCE(K1.NILAI,0) NILAI_KOMPETENSI
		, COALESCE(K2.NILAI,0) NILAI_KINERJA
		FROM pegawai P
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID
			, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 3 THEN 1 ELSE 0 END) JUMLAH_HK_BERAT
			, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 2 THEN 1 ELSE 0 END) JUMLAH_HK_SEDANG
			, SUM(CASE WHEN A.TINGKAT_HUKUMAN_ID = 1 THEN 1 ELSE 0 END) JUMLAH_HK_RINGAN
			FROM hukuman A
			WHERE 1=1
			AND (COALESCE(NULLIF(A.STATUS, ''), NULL) IS NULL OR A.STATUS = '2')
			GROUP BY A.PEGAWAI_ID
		) HK ON HK.PEGAWAI_ID = P.PEGAWAI_ID
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID, COUNT(1) NILAI
			FROM diklat_kursus A
			WHERE 1=1 AND A.STATUS_LULUS = '1'
			AND (COALESCE(NULLIF(A.STATUS, ''), NULL) IS NULL OR A.STATUS = '2')
			AND A.TIPE_KURSUS_ID IN (1,2)
			AND A.REF_JENIS_KURSUS_ID IN (162, 274)
			GROUP BY A.PEGAWAI_ID
		) DK ON DK.PEGAWAI_ID = P.PEGAWAI_ID
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID, COUNT(1) NILAI
			FROM penghargaan A
			WHERE REF_PENGHARGAAN_ID IN
			(
				SELECT 
				REF_PENGHARGAAN_ID
				FROM sapk.ref_penghargaan A
				WHERE 1 = 1
				AND A.INFO_DETIL = '1'
			)
			AND (COALESCE(NULLIF(A.STATUS, ''), NULL) IS NULL OR A.STATUS = '2')
			GROUP BY A.PEGAWAI_ID
		) PH ON PH.PEGAWAI_ID = P.PEGAWAI_ID
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID, MAX(SKOR_KOMPETENSI) NILAI
			FROM penilaian_kompetensi A
			INNER JOIN
			(
				SELECT PEGAWAI_ID, MAX(TANGGAL_KOMPETENSI) TANGGAL_KOMPETENSI
				FROM penilaian_kompetensi
				WHERE 1=1
				GROUP BY PEGAWAI_ID
			) B ON A.PEGAWAI_ID = B.PEGAWAI_ID AND A.TANGGAL_KOMPETENSI = B.TANGGAL_KOMPETENSI
			WHERE 1=1
			GROUP BY A.PEGAWAI_ID
		) K1 ON K1.PEGAWAI_ID = P.PEGAWAI_ID
		LEFT JOIN
		(
			SELECT A.PEGAWAI_ID, MAX(PRESTASI_HASIL) NILAI
			FROM penilaian_skp A
			INNER JOIN
			(
				SELECT PEGAWAI_ID, MAX(TAHUN) TAHUN
				FROM penilaian_skp
				WHERE 1=1
				GROUP BY PEGAWAI_ID
			) B ON A.PEGAWAI_ID = B.PEGAWAI_ID AND A.TAHUN = B.TAHUN
			WHERE 1=1
			GROUP BY A.PEGAWAI_ID
		) K2 ON K2.PEGAWAI_ID = P.PEGAWAI_ID
	) P
	WHERE 1=1 AND P.STATUS_PEGAWAI_ID IN (1,2,6)
	--AND P.PEGAWAI_ID = 8300
	ORDER BY P.PEGAWAI_ID;

	INSERT INTO talent.peta_pegawai
	(
		PEGAWAI_ID, RUMPUN_ID, STATUS_PEGAWAI_ID
		, NILAI_INDISIPLINER, NILAI_PBJ, NILAI_PRESTASI, NILAI_KOMPETENSI, NILAI_KINERJA, NILAI_RUMPUN, NILAI_FAKTOR_KOREKSI
	)
	SELECT
	A.PEGAWAI_ID, R.RUMPUN_ID, A.STATUS_PEGAWAI_ID
	, A.NILAI_INDISIPLINER, A.NILAI_PBJ, A.NILAI_PRESTASI, A.NILAI_KOMPETENSI, A.NILAI_KINERJA, 0::numeric
	, COALESCE(A.NILAI_INDISIPLINER,0) + COALESCE(A.NILAI_PBJ,0) + COALESCE(A.NILAI_PRESTASI,0) NILAI_FAKTOR_KOREKSI
	FROM talent.peta_pegawai A
	, (SELECT RUMPUN_ID FROM talent.rumpun) R
	WHERE A.RUMPUN_ID = -1 --AND PEGAWAI_ID = 8300
	;

	DELETE FROM talent.peta_pegawai WHERE RUMPUN_ID = -1;

	update talent.peta_pegawai as a
	set
	nilai_rumpun= x.nilai + nilai_rumpun
	from
	(
		select pegawai_id, rumpun_id, nilai from talent.p_rumpun_rekamjejak(0)
		--where pegawai_id = 8300
	) as x
	where a.pegawai_id = x.pegawai_id and a.rumpun_id = x.rumpun_id;

	update talent.peta_pegawai as a
	set
	nilai_rumpun= x.nilai + nilai_rumpun
	from
	(
		select pegawai_id, rumpun_id, nilai from talent.p_rumpun_kualifikasi(0)
		--where pegawai_id = 8300
	) as x
	where a.pegawai_id = x.pegawai_id and a.rumpun_id = x.rumpun_id;

	update talent.peta_pegawai as a
	set
	nilai_rumpun= x.nilai + nilai_rumpun
	from
	(
		select pegawai_id, rumpun_id, nilai from talent.p_rumpun_kompetensi(0)
		--where pegawai_id = 8300
	) as x
	where a.pegawai_id = x.pegawai_id and a.rumpun_id = x.rumpun_id;
	
	--select talent.ppetapegawai()
exception
when others
then raise exception 'an error was encountered - '; 

end;
$body$
language plpgsql volatile cost 100;
alter function talent.ppetapegawai() owner to postgres;